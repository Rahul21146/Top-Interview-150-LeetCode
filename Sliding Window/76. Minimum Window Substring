/*
Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string "".

The testcases will be generated such that the answer is unique.

 

Example 1:

Input: s = "ADOBECODEBANC", t = "ABC"
Output: "BANC"
Explanation: The minimum window substring "BANC" includes 'A', 'B', and 'C' from string t.
Example 2:

Input: s = "a", t = "a"
Output: "a"
Explanation: The entire string s is the minimum window.
Example 3:

Input: s = "a", t = "aa"
Output: ""
Explanation: Both 'a's from t must be included in the window.
Since the largest window of s only has one 'a', return empty string.
 

Constraints:

m == s.length
n == t.length
1 <= m, n <= 105
s and t consist of uppercase and lowercase English letters.
 

Follow up: Could you find an algorithm that runs in O(m + n) time?
*/

class Solution {
public:
    string minWindow(string s, string t) {
       
        int len1 = s.length();
        int len2 = t.length();
        int start = 0;
        if(len1 < len2) {
            return "";
        }
 
        int ansIndex = -1;
        int ansLen = INT_MAX;

        unordered_map<char,int> sMap;
        unordered_map<char,int> tMap;
        for(char ch: t) {
            tMap[ch]++;
        }
        int count = 0;
        int e = 0;
        while(e < s.length()) {
            char ch = s[e];
            sMap[ch]++;
            if(sMap[ch] <= tMap[ch]) {
                count++;
            }

            if(count == len2) {
                while(sMap[s[start]] > tMap[s[start]]) {
                    sMap[s[start]]--;
                    start++;
                }
                int windowLength = e - start + 1;
                if(windowLength < ansLen) {
                    ansLen = windowLength;
                    ansIndex = start;
                }
            }
            e++;
        }

        if(ansIndex == -1) {
            return "";
        }
        else {
            return s.substr(ansIndex, ansLen);
        }

    }
};
