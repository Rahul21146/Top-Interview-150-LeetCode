/*
Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

 

Example 1:

Input: nums = [3,2,3]
Output: 3
Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2
 

Constraints:

n == nums.length
1 <= n <= 5 * 104
-109 <= nums[i] <= 109
*/



//first apporach  using unordered map its takes O(n) time complexity ------------------------------------>  
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        unordered_map<int,int> mp;
        for(int i=0;i<nums.size();i++){
            mp[nums[i]]++;
            if(mp[nums[i]]>nums.size()/2){
                return nums[i];
            }
        }
        return 0;
    }
//second apporach using sort function its take O(nlog(n)) time compleity
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        int max=0,count=1;
        int n=nums.size();
        int i;
        for(i=0;i<n-1;i++)
        {
           if(nums[i]==nums[i+1])
           {
               count++;
               max=max>count?max:count;
               if(max>n/2)
               {
                   return nums[i];
               }

           }
           else
           {
               count=1;
           }
        }
        return nums[i];
        
    }
};




};
