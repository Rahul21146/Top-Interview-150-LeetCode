/*
Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

You must write an algorithm that runs in O(n) time and without using the division operation.

 

Example 1:

Input: nums = [1,2,3,4]
Output: [24,12,8,6]
Example 2:

Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]
 

Constraints:

2 <= nums.length <= 105
-30 <= nums[i] <= 30
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.
*/


class Solution {
    public:
     int trap(int[] height) {
        int i;
        int n=height.length;
        int [] left=new int[n];
        int [] right=new int[n];
        left[0]=height[0];
        for(i=1;i<n;i++)
        {
           left[i]=left[i-1]>height[i]?left[i-1]:height[i];
        }
        right[n-1]=height[n-1];
        for(i=n-2;i>=0;i--)
        {
            right[i]=right[i+1]>height[i]?right[i+1]:height[i];
        }
        int amt=0;
        for(i=0;i<n;i++)
        {
            amt=amt+(left[i]<right[i]?left[i]:right[i])-height[i];
        }
        return amt;
    }
}
