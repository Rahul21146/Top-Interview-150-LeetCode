/*
Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.
Example 2:

Input: nums = [0,1,1]
Output: []
Explanation: The only possible triplet does not sum up to 0.
Example 3:

Input: nums = [0,0,0]
Output: [[0,0,0]]
Explanation: The only possible triplet sums up to 0.
 

Constraints:

3 <= nums.length <= 3000
-105 <= nums[i] <= 105
*/
class Solution {
public:

 void solve(vector<vector<int>> &ans, vector<int>& nums ,int first, int start, int end ,int &row){

     while(start<end){
         if(nums[start]+nums[first]+nums[end]==0){
            ans.push_back({nums[first],nums[start],nums[end]});
            int tempIndex1 = start, tempIndex2 = end;
            while(start < end && nums[start] == nums[tempIndex1]) start++;
            while(start < end && nums[end] == nums[tempIndex2]) end--;
         }

         else if(nums[first]+nums[start]+nums[end]<0){
             start++;
         }
         else{
             end--;
         }
     }
 }
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> ans;
        sort(nums.begin(),nums.end());

        for(int i=0;i<nums.size()-2;i++){
            int first=i;
            int start=i+1;
            int end=nums.size()-1;
            int row=0;
            solve(ans,nums,first,start,end,row);
            while(i+1 < nums.size() && nums[i] == nums[i+1]) i++;
        }

        return ans;
    }
};
